# Auto-generated using compose2nix v0.3.1.
{
  pkgs,
  lib,
  ...
}: {
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [53];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."spaceclient-jank" = {
    image = "localhost/compose2nix/spaceclient-jank";
    ports = [
      "9780:8080/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=jank"
      "--network=spaceclient_default"
    ];
  };
  systemd.services."podman-spaceclient-jank" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-spaceclient_default.service"
    ];
    requires = [
      "podman-network-spaceclient_default.service"
    ];
    partOf = [
      "podman-compose-spaceclient-root.target"
    ];
    wantedBy = [
      "podman-compose-spaceclient-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-spaceclient_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f spaceclient_default";
    };
    script = ''
      podman network inspect spaceclient_default || podman network create spaceclient_default
    '';
    partOf = ["podman-compose-spaceclient-root.target"];
    wantedBy = ["podman-compose-spaceclient-root.target"];
  };

  # Builds
  systemd.services."podman-build-spaceclient-jank" = {
    path = [pkgs.podman pkgs.git];
    serviceConfig = {
      Type = "oneshot";
      TimeoutSec = 300;
    };
    script = ''
      cd /home/mtgmonkey/spaceclient
      podman build -t compose2nix/spaceclient-jank .
    '';
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-spaceclient-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
